{"name":"Gitlab-vagrant-vm","tagline":"Vagrant VM for GITLAB Developer. ","body":"Gitlab-Vagrant-VM\r\n=================\r\n\r\nDescription\r\n-----------\r\n\r\nSetup a dev environment for Gitlab.\r\n\r\nThe final product contain all databases set up, working tests and all gems\r\ninstalled.\r\n\r\nRequirements\r\n------------\r\n\r\n* [VirtualBox](https://www.virtualbox.org)\r\n* [Vagrant 1.2.x](http://vagrantup.com)\r\n* the NFS packages. Already there if you are using Mac OS, and\r\n  not necessary if you are using Windows. On Linux:\r\n\r\n    ```bash\r\n    $ sudo apt-get install nfs-kernel-server nfs-common portmap\r\n    ```\r\n    On OS X you can also choose to use [the (commercial) Vagrant VMware Fusion plugin](http://www.vagrantup.com/vmware) instead of VirtualBox.\r\n\r\n* some patience :)\r\n\r\n**Note:** Make sure to use Vagrant v1.2.x. Do not install via rubygems.org as there exists an old gem\r\nwhich will probably cause errors. Instead, grab the latest version from http://downloads.vagrantup.com/.\r\n\r\nInstallation\r\n------------\r\n\r\nClone the repository:\r\n\r\n```bash\r\n$ git clone https://github.com/gitlabhq/gitlab-vagrant-vm\r\n$ cd gitlab-vagrant-vm\r\n```\r\n\r\nAnd install gems and chef's necessary packages:\r\n\r\n```bash\r\n$ bundle install\r\n$ bundle exec librarian-chef install\r\n```\r\n\r\nFinally, you should be able to use:\r\n\r\n```bash\r\n$ vagrant up\r\n```\r\n\r\nBy default the VM uses 1GB of memory and 1 CPU core. If you want to use more memory or cores you can use the GITLAB_VAGRANT_MEMORY and GITLAB_VAGRANT_CORES environment variables:\r\n```bash\r\nGITLAB_VAGRANT_MEMORY=1536 GITLAB_VAGRANT_CORES=2 vagrant up\r\n```\r\n\r\n**Note:**\r\nYou can't use a vagrant project on an encrypted partition (ie. it won't work if your home directory is encrypted).\r\n\r\nYou'll be asked for your password to set up NFS shares.\r\n\r\nOnce everything is done you can log into the virtual machine to run tests:\r\n\r\n```bash\r\n$ vagrant ssh\r\n$ cd /vagrant/gitlabhq/\r\n$ bundle exec rake gitlab:test\r\n```\r\n\r\nStart the Gitlab app:\r\n```bash\r\n$ bundle exec foreman start\r\n```\r\n\r\nYou should also configure your own remote since by default it's going to grab\r\ngitlab's master branch.\r\n\r\n```bash\r\n$ git remote add mine git://github.com/me/gitlabhq.git\r\n$ # or if you prefer set up your origin as your own repository\r\n$ git remote set-url origin git://github.com/me/gitlabhq.git\r\n```\r\n\r\nOpenLdap\r\n--------\r\n\r\nIf you need to setup OpenLDAP in order to test the functionality you can use the [basic OpenLDAP setup guide](OpenLDAP.md)\r\n\r\nVirtual Machine Management\r\n--------------------------\r\n\r\nWhen done just log out with `^D` and suspend the virtual machine\r\n\r\n```bash\r\n$ vagrant suspend\r\n```\r\n\r\nthen, resume to hack again\r\n\r\n```bash\r\n$ vagrant resume\r\n```\r\n\r\nRun\r\n\r\n```bash\r\n$ vagrant halt\r\n```\r\n\r\nto shutdown the virtual machine, and\r\n\r\n```bash\r\n$ vagrant up\r\n```\r\n\r\nto boot it again.\r\n\r\nYou can find out the state of a virtual machine anytime by invoking\r\n\r\n```bash\r\n$ vagrant status\r\n```\r\n\r\nFinally, to completely wipe the virtual machine from the disk **destroying all its contents**:\r\n\r\n```bash\r\n$ vagrant destroy # DANGER: all is gone\r\n```\r\n\r\nInformation\r\n-----------\r\n\r\n* Virtual Machine IP: 192.168.3.14\r\n* Virtual Machine user/password: vagrant/vagrant\r\n* GitLab webapp running at: http://192.168.3.14:3000/\r\n* GitLab webapp user/password: admin@local.host/5iveL!fe\r\n* MySQL user/password: vagrant/Vagrant\r\n* MySQL root password: nonrandompasswordsaregreattoo\r\n* Xvfb is used as a service and it should be already running, but in case you\r\n  need to restart it manually:\r\n\r\n```bash\r\n$ sudo /etc/init.d/xvfb stop\r\n$ sudo /etc/init.d/xvfb start\r\n```\r\n\r\n\r\n* Install another Ruby: `rbenv install 1.9.3-p448`\r\n* Switch to a different Ruby: `rbenv global 1.9.3-p448`\r\n\r\nUpdating\r\n---------------\r\n\r\nThe gitlabhq version is _not_ updated when you rebuild your virtual machine with the following command:\r\n\r\n```bash\r\n$ vagrant destroy && vagrant up\r\n```\r\n\r\nYou must update it yourself by going to the gitlabhq subdirectory in the gitlab-vagrant-vm repo and pulling the latest changes:\r\n\r\n```bash\r\n$ cd gitlabhq && git pull --ff origin master\r\n```\r\n\r\nA bit of background on why this is needed. When you run 'vagrant up' there is a [checkout action in the recipe](https://github.com/gitlabhq/gitlab-vagrant-vm/blob/master/site-cookbooks/gitlab/recipes/vagrant.rb#L54) that [points to](https://github.com/gitlabhq/gitlab-vagrant-vm/blob/master/site-cookbooks/gitlab/attributes/vagrant.rb#L10) the [gitlabhq repo](https://github.com/gitlabhq/gitlabhq). You won't see any difference when running 'git status' in the gitlab-vagrant-vm repo because gitlabhq/ is in the [.gitignore](https://github.com/gitlabhq/gitlab-vagrant-vm/blob/master/.gitignore). You can update the gitlabhq repo yourself or remove the gitlabhq directory so the repo is checked out again.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}